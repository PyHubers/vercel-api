export default async function handler(req, res) {
    // –†–∞–∑—Ä–µ—à–∞–µ–º CORS (–¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ C#)
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ CORS –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö OPTIONS-–∑–∞–ø—Ä–æ—Å–æ–≤
    if (req.method === 'OPTIONS') {
      return res.status(200).end();
    }
  
    // –¢–æ–ª—å–∫–æ POST-–∑–∞–ø—Ä–æ—Å—ã
    if (req.method !== 'POST') {
      return res.status(405).json({ error: '–¢–æ–ª—å–∫–æ POST!' });
    }
  
    try {
      const { clientId } = req.body;
      console.log('üì¶ –ü–æ–ª—É—á–µ–Ω –∫–ª–∏–µ–Ω—Ç:', clientId);
  
      // –û—Ç–≤–µ—Ç –¥–ª—è C#
      return res.status(200).json({
        success: true,
        clientId: clientId,
        message: `–ö–ª–∏–µ–Ω—Ç ${clientId} –æ–±—Ä–∞–±–æ—Ç–∞–Ω!`
      });
  
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      return res.status(500).json({ error: '–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞' });
    }
  }
